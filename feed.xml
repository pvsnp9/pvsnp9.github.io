<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://pvsnp9.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://pvsnp9.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-01-01T18:21:06+00:00</updated><id>https://pvsnp9.github.io/feed.xml</id><title type="html">Tsuyog Basnet</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Protobuf</title><link href="https://pvsnp9.github.io/blog/2023/protobbuf/" rel="alternate" type="text/html" title="Protobuf"/><published>2023-12-31T00:00:00+00:00</published><updated>2023-12-31T00:00:00+00:00</updated><id>https://pvsnp9.github.io/blog/2023/protobbuf</id><content type="html" xml:base="https://pvsnp9.github.io/blog/2023/protobbuf/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>Protocol Buffers (protobuf) is a language-agnostic data <code class="language-plaintext highlighter-rouge">byte</code> serialization format developed by Google. It uses a simple language to define data structures in <code class="language-plaintext highlighter-rouge">.proto</code> files. Protobuf supports various data types, including integers, floating-point numbers, booleans, strings, bytes, and custom message types. Messages, the fundamental building blocks, are collections of key-value pairs, akin to objects or structs in programming languages. Additionally, protobuf introduces advanced features such as enumerations, repeated fields, and maps. The format is designed for efficiency, producing compact binary representations of data. Code generators then transform these definitions into source code in different programming languages, allowing seamless data exchange between applications written in diverse languages while providing support for backward and forward compatibility. In addition , gRPC is an open-source RPC framework developed by Google that facilitates efficient, language-agnostic communication between distributed systems using Protocol Buffers</p> <p>In this blog, we’ll delve into the fundamentals of Protocol Buffers and explore the seamless integration of gRPC in the Go programming language, uncovering the power of these tools in enhancing communication and interoperability in modern software architectures.</p> <p>JSON</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
    </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Delta"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"unit"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Special"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"rank"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
    </span><span class="nl">"division"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Air"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>Protobuf</p> <div class="language-protobuf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">syntax</span><span class="o">:</span> <span class="s">"proto3"</span><span class="p">;</span>
<span class="k">option</span> <span class="na">go_package</span> <span class="o">=</span><span class="s">"{package_name}/pkg/pb/protogen"</span><span class="p">;</span>

<span class="kn">package</span> <span class="nn">basic</span><span class="p">;</span>

<span class="kd">message</span> <span class="nc">Officer</span> <span class="p">{</span>
    <span class="kt">uint32</span> <span class="na">id</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="kt">string</span> <span class="na">name</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
    <span class="n">int</span> <span class="na">rank</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
    <span class="kt">string</span> <span class="na">division</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div></div> <p>The <code class="language-plaintext highlighter-rouge">option go_package</code> tells the go package name and detination for proto generated source code.</p> <p>Sidenote: <code class="language-plaintext highlighter-rouge">Marshal</code> refers to the process of converting a data structure into its serialized representation, often in the form of a byte slice or a string. This operation is commonly used for data interchange or storage. Conversely, <code class="language-plaintext highlighter-rouge">Unmarshal</code> involves taking the serialized data and reconstructing the original data structure. These operations are frequently used in encoding and decoding data, such as converting between Go data structures and formats like JSON, XML, or Protocol Buffers. The encoding/json and other related packages in Go provide functions like json.Marshal and json.Unmarshal to perform these operations for JSON encoding and decoding, while similar functions exist for other formats and libraries.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Note: Marshall is serialization and Unmarshall is deserilization. 
</code></pre></div></div> <p>Protobuf is designed with schema evolution in mind to avoid braeaking changes. It needs to follow a certain rules.</p> <p>Protobuf styling Guide<a href="https://github.com/uber/prototool/blob/dev/style/README.md#spacing"> (Uber) </a></p> <h2 id="makefile">Makefile</h2> <div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">GO_MODULE</span> <span class="o">:=</span> github.com/pvsnp9/example


<span class="nl">.PHONY</span><span class="o">:</span> <span class="nf">tidy</span>
<span class="nl">tidy</span><span class="o">:</span>
	go mod tidy


<span class="nl">.PHONY</span><span class="o">:</span> <span class="nf">clean</span>
<span class="nl">clean</span><span class="o">:</span>
	<span class="p">@</span><span class="k">if</span> <span class="o">[</span> <span class="nt">-d</span> <span class="s2">"protogen"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then </span><span class="nb">rm</span> <span class="nt">-rf</span> protogen<span class="p">;</span> <span class="k">fi</span>


<span class="nl">.PHONY</span><span class="o">:</span> <span class="nf">proto</span>
<span class="nl">proto</span><span class="o">:</span>
	protoc <span class="nt">--go_opt</span><span class="o">=</span><span class="nv">module</span><span class="o">=</span><span class="p">${</span>GO_MODULE<span class="p">}</span> <span class="nt">--go_out</span><span class="o">=</span><span class="nb">.</span> ./pkg/pb/<span class="k">**</span>/<span class="k">*</span>.proto


<span class="nl">.PHONY</span><span class="o">:</span> <span class="nf">build</span>
<span class="nl">build</span><span class="o">:</span> <span class="nf">clean protoc tidy</span>


<span class="nl">.PHONY</span><span class="o">:</span> <span class="nf">run</span>
<span class="nl">run</span><span class="o">:</span>
	go run cmd/main.go


</code></pre></div></div> <p>When you use the Protocol Buffers compiler (<code class="language-plaintext highlighter-rouge">protoc</code>) to generate code for a proto file, it typically produces files with certain naming conventions based on the target language and the type of service definition. Here are the meanings of the files you mentioned:</p> <ol> <li><strong><code class="language-plaintext highlighter-rouge">*.pb.go</code> Files:</strong> <ul> <li>These are Go source files generated by the <code class="language-plaintext highlighter-rouge">protoc</code> compiler when targeting Go (Golang).</li> <li>The <code class="language-plaintext highlighter-rouge">*.pb.go</code> files contain the generated code for your protocol buffer messages, allowing you to easily serialize and deserialize data structures defined in your proto file.</li> <li>The file name is typically derived from your original proto file. For example, if your proto file is named <code class="language-plaintext highlighter-rouge">example.proto</code>, the generated Go file might be named <code class="language-plaintext highlighter-rouge">example.pb.go</code>.</li> </ul> </li> <li><strong><code class="language-plaintext highlighter-rouge">*_grpc.pb.go</code> Files:</strong> <ul> <li>When you define a gRPC service in your proto file, the <code class="language-plaintext highlighter-rouge">protoc</code> compiler generates additional code for the service implementation and client in addition to the message types.</li> <li>The <code class="language-plaintext highlighter-rouge">*_grpc.pb.go</code> file contains the gRPC service interface and the server-side implementation code.</li> <li>The naming convention usually involves adding <code class="language-plaintext highlighter-rouge">_grpc.pb.go</code> to the base name of your proto file. For example, if your proto file is named <code class="language-plaintext highlighter-rouge">example.proto</code>, the generated gRPC file might be named <code class="language-plaintext highlighter-rouge">example_grpc.pb.go</code>.</li> </ul> </li> </ol> <p>Here’s a quick example to illustrate the naming conventions:</p> <ul> <li>Original Proto File: <code class="language-plaintext highlighter-rouge">example.proto</code></li> <li>Generated Go File for Messages: <code class="language-plaintext highlighter-rouge">example.pb.go</code></li> <li>Generated Go File for gRPC Service: <code class="language-plaintext highlighter-rouge">example_grpc.pb.go</code></li> </ul> <p>These files, once generated, allow you to work with your protocol buffer messages and gRPC service in your Go application. Remember that the actual names may depend on your specific proto file and project structure.</p> <h2 id="repeated-fields-enumeration-comments">Repeated fields, enumeration, Comments</h2> <p>Repeated : A filed with one or zero values like a array/list. The default value is empty.</p> <div class="language-protobuf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">message</span> <span class="nc">Person</span> <span class="p">{</span>
    <span class="k">repeated</span> <span class="n">int</span> <span class="n">itemId</span>
<span class="p">}</span>
</code></pre></div></div> <div class="language-protobuf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">enum</span> <span class="n">Gender</span> <span class="p">{</span>
    <span class="na">GENDER_UNSPECIFIED</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="na">GENDER_MALE</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="na">GENDER_FEMALE</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>How to use them:</p> <div class="language-protobuf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">message</span> <span class="nc">User</span> <span class="p">{</span>
  <span class="kt">uint32</span> <span class="na">id</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="kt">string</span> <span class="na">username</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
  <span class="kt">bool</span> <span class="na">is_active</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
  <span class="k">repeated</span> <span class="kt">string</span> <span class="na">emails</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
  <span class="n">Gender</span> <span class="na">gender</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="nested-message-type">Nested message type</h2> <div class="language-protobuf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Define another message called "Address"</span>
<span class="kd">message</span> <span class="nc">Address</span> <span class="p">{</span>
  <span class="c1">// Define fields for the Address message</span>
  <span class="kt">string</span> <span class="na">street</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="kt">string</span> <span class="na">city</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
  <span class="kt">string</span> <span class="na">country</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
  <span class="kt">string</span> <span class="na">postal_code</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
  <span class="n">Coordinate</span> <span class="na">coordinate</span> <span class="o">=</span> <span class="mi">15</span><span class="p">;</span> <span class="c1">//field to access the cordindate </span>

  <span class="c1">// nested</span>
  <span class="kd">message</span> <span class="nc">Coordinate</span> <span class="p">{</span>
      <span class="kt">double</span> <span class="na">lattitude</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
      <span class="kt">double</span> <span class="na">longitude</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//Using it </span>
<span class="n">address</span> <span class="o">:=</span> <span class="n">basic</span><span class="o">.</span><span class="n">Address</span><span class="p">{</span>
    <span class="n">Street</span><span class="o">:</span>     <span class="s">"Street"</span><span class="p">,</span>
    <span class="n">City</span><span class="o">:</span>       <span class="s">"City"</span><span class="p">,</span>
    <span class="n">PostalCode</span><span class="o">:</span> <span class="s">"PSTCD3"</span><span class="p">,</span>
    <span class="n">Coordinate</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">basic</span><span class="o">.</span><span class="n">Address_Coordinate</span><span class="p">{</span>
        <span class="n">Lattitude</span><span class="o">:</span> <span class="m">40.705152254</span><span class="p">,</span>
        <span class="n">Longitude</span><span class="o">:</span> <span class="o">-</span><span class="m">74.52515425</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="p">}</span>

</code></pre></div></div> <p>##ProtoJSON</p> <p>a tool to convert JSON to protobuf and vice-versa.</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">import</span> <span class="p">(</span>
	<span class="s">"log"</span>
	<span class="s">"github.com/pvsnp9/example/pkg/protogen/basic"</span>
	<span class="s">"google.golang.org/protobuf/encoding/protojson"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">ProtoToJsonUser</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">u</span> <span class="o">:=</span> <span class="n">basic</span><span class="o">.</span><span class="n">User</span><span class="p">{</span>
		<span class="n">Id</span><span class="o">:</span>       <span class="m">2</span><span class="p">,</span>
		<span class="n">Username</span><span class="o">:</span> <span class="s">"Bravo"</span><span class="p">,</span>
		<span class="n">IsActive</span><span class="o">:</span> <span class="no">true</span><span class="p">,</span>
		<span class="n">Password</span><span class="o">:</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">(</span><span class="s">"adfasfas"</span><span class="p">),</span>
		<span class="n">Emails</span><span class="o">:</span>   <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">"test@mai.com"</span><span class="p">,</span> <span class="s">"test2@mail.com"</span><span class="p">},</span>
		<span class="n">Gender</span><span class="o">:</span>   <span class="n">basic</span><span class="o">.</span><span class="n">Gender_GENDER_MALE</span><span class="p">,</span>
	<span class="p">}</span>
	<span class="n">jsonBytes</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">protojson</span><span class="o">.</span><span class="n">Marshal</span><span class="p">(</span><span class="o">&amp;</span><span class="n">u</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="n">log</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"error"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="n">log</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="kt">string</span><span class="p">(</span><span class="n">jsonBytes</span><span class="p">))</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">JsonToProto</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">json</span> <span class="o">:=</span> <span class="s">`{
		"id": 5,
		"username":"delta",
		"is_active":true,
		"password":"YWRmYXNmYXM=",
		"emails":["test@mai.com", "test2@mail.com"],
		"gender":"GENDER_MALE"
	}`</span>

	<span class="k">var</span> <span class="n">user</span> <span class="n">basic</span><span class="o">.</span><span class="n">User</span>
	<span class="n">err</span> <span class="o">:=</span> <span class="n">protojson</span><span class="o">.</span><span class="n">Unmarshal</span><span class="p">([]</span><span class="kt">byte</span><span class="p">(</span><span class="n">json</span><span class="p">),</span> <span class="o">&amp;</span><span class="n">user</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="n">log</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Err:"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="n">log</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="o">&amp;</span><span class="n">user</span><span class="p">)</span>
<span class="p">}</span>


</code></pre></div></div> <h2 id="importing-protos">Importing Protos</h2> <div class="language-protobuf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">syntax</span> <span class="o">=</span> <span class="s">"proto3"</span><span class="p">;</span>

<span class="k">import</span> <span class="s">"pkg/pb/basic/user.proto"</span><span class="p">;</span>
<span class="c1">// package_name/yoo=ur_directory</span>

<span class="kn">package</span> <span class="nn">basic</span><span class="p">;</span>

<span class="k">option</span> <span class="na">go_package</span> <span class="o">=</span> <span class="s">"github.com/pvsnp9/example/pkg/protogen/basic"</span><span class="p">;</span>
<span class="c1">// package_name/generated file destiantion</span>

<span class="kd">message</span> <span class="nc">UserGroup</span> <span class="p">{</span>
    <span class="kt">int32</span> <span class="na">group_id</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">[</span><span class="na">json_name</span><span class="o">=</span><span class="s">"group_id"</span><span class="p">];</span>
    <span class="kt">string</span> <span class="na">group_name</span> <span class="o">=</span> <span class="mi">2</span> <span class="p">[</span><span class="na">json_name</span><span class="o">=</span><span class="s">"group_name"</span><span class="p">];</span>
    <span class="k">repeated</span> <span class="kt">string</span> <span class="na">roles</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
    <span class="k">repeated</span> <span class="n">User</span> <span class="na">user</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
    <span class="kt">string</span> <span class="na">description</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div></div> <p>Importing non-local protos.</p> <div class="language-protobuf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">syntax</span> <span class="o">=</span> <span class="s">"proto3"</span><span class="p">;</span>

<span class="k">import</span> <span class="s">"pkg/pb/basic/application.proto"</span><span class="p">;</span>
<span class="k">import</span> <span class="s">"pkg/pb/dummy/application.proto"</span><span class="p">;</span>

<span class="kn">package</span> <span class="nn">jobsearch</span><span class="p">;</span>

<span class="k">option</span> <span class="na">go_package</span> <span class="o">=</span> <span class="s">"github.com/pvsnp9/example/pkg/protogen/jobsearch"</span><span class="p">;</span>

<span class="kd">message</span> <span class="nc">JobCandidate</span> <span class="p">{</span>
    <span class="kt">uint32</span> <span class="na">job_candidate_id</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">[</span><span class="na">json_name</span> <span class="o">=</span> <span class="s">"job_candidate_id"</span><span class="p">];</span>
    <span class="n">dummy.Application</span> <span class="na">application</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
  <span class="p">}</span>
  
  <span class="kd">message</span> <span class="nc">JobSoftware</span> <span class="p">{</span>
    <span class="kt">uint32</span> <span class="na">job_software_id</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">[</span><span class="na">json_name</span> <span class="o">=</span> <span class="s">"job_software_id"</span><span class="p">];</span>
    <span class="n">basic.Application</span> <span class="na">application</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
  <span class="p">}</span>

</code></pre></div></div> <h2 id="any">Any</h2> <div class="language-protobuf highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">message</span> <span class="nc">Papermail</span><span class="p">{</span>
    <span class="kt">string</span> <span class="na">paper_mail_address</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">[</span><span class="na">json_name</span> <span class="o">=</span> <span class="s">"paper_mail_address"</span><span class="p">];</span>
  <span class="p">}</span>

  <span class="kd">message</span> <span class="nc">SocialMedia</span><span class="p">{</span>
    <span class="kt">string</span> <span class="na">social_media_platform</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">[</span><span class="na">json_name</span> <span class="o">=</span> <span class="s">"social_media_platform"</span><span class="p">];</span>
    <span class="kt">string</span> <span class="na">social_media_username</span> <span class="o">=</span> <span class="mi">2</span> <span class="p">[</span><span class="na">json_name</span> <span class="o">=</span> <span class="s">"social_media_username"</span><span class="p">];</span>
  <span class="p">}</span>

  <span class="kd">message</span> <span class="nc">InstantMessaging</span> <span class="p">{</span>
    <span class="kt">string</span> <span class="na">instant_messaging_product</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">[</span><span class="na">json_name</span> <span class="o">=</span> <span class="s">"instant_messaging_product"</span><span class="p">];</span>
    <span class="kt">string</span> <span class="na">instant_messaging_username</span> <span class="o">=</span> <span class="mi">2</span> <span class="p">[</span><span class="na">json_name</span> <span class="o">=</span> <span class="s">"instant_messaging_username"</span><span class="p">];</span>
  <span class="p">}</span>
</code></pre></div></div> <div class="language-protobuf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//usage </span>
<span class="kd">message</span> <span class="nc">User</span> <span class="p">{</span>
     <span class="n">google.protobuf.Any</span> <span class="na">communication_channel</span> <span class="o">=</span> <span class="mi">19</span> <span class="p">[</span><span class="na">json_name</span> <span class="o">=</span> <span class="s">"communication_channel"</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div></div> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//examples </span>
<span class="k">func</span> <span class="n">randomCommunicationChanel</span><span class="p">()</span> <span class="n">anypb</span><span class="o">.</span><span class="n">Any</span> <span class="p">{</span>
	<span class="n">paper_mail</span> <span class="o">:=</span> <span class="n">basic</span><span class="o">.</span><span class="n">Papermail</span><span class="p">{</span>
		<span class="n">PaperMailAddress</span><span class="o">:</span> <span class="s">"Mailing address !!"</span><span class="p">,</span>
	<span class="p">}</span>
	<span class="n">social_media</span> <span class="o">:=</span> <span class="n">basic</span><span class="o">.</span><span class="n">SocialMedia</span><span class="p">{</span>
		<span class="n">SocialMediaPlatform</span><span class="o">:</span> <span class="s">"insta"</span><span class="p">,</span>
		<span class="n">SocialMediaUsername</span><span class="o">:</span> <span class="s">"rango"</span><span class="p">,</span>
	<span class="p">}</span>

	<span class="n">instant_messaging</span> <span class="o">:=</span> <span class="n">basic</span><span class="o">.</span><span class="n">InstantMessaging</span><span class="p">{</span>
		<span class="n">InstantMessagingProduct</span><span class="o">:</span>  <span class="s">"whatsapp"</span><span class="p">,</span>
		<span class="n">InstantMessagingUsername</span><span class="o">:</span> <span class="s">"Rango"</span><span class="p">,</span>
	<span class="p">}</span>

	<span class="k">var</span> <span class="n">any</span> <span class="n">anypb</span><span class="o">.</span><span class="n">Any</span>

	<span class="k">switch</span> <span class="n">r</span> <span class="o">:=</span> <span class="n">rand</span><span class="o">.</span><span class="n">Intn</span><span class="p">(</span><span class="m">20</span><span class="p">)</span> <span class="o">%</span> <span class="m">3</span><span class="p">;</span> <span class="n">r</span> <span class="p">{</span>
	<span class="k">case</span> <span class="m">0</span><span class="o">:</span>
		<span class="n">anypb</span><span class="o">.</span><span class="n">MarshalFrom</span><span class="p">(</span><span class="o">&amp;</span><span class="n">any</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">paper_mail</span><span class="p">,</span> <span class="n">proto</span><span class="o">.</span><span class="n">MarshalOptions</span><span class="p">{})</span>
	<span class="k">case</span> <span class="m">1</span><span class="o">:</span>
		<span class="n">anypb</span><span class="o">.</span><span class="n">MarshalFrom</span><span class="p">(</span><span class="o">&amp;</span><span class="n">any</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">social_media</span><span class="p">,</span> <span class="n">proto</span><span class="o">.</span><span class="n">MarshalOptions</span><span class="p">{})</span>
	<span class="k">default</span><span class="o">:</span>
		<span class="n">anypb</span><span class="o">.</span><span class="n">MarshalFrom</span><span class="p">(</span><span class="o">&amp;</span><span class="n">any</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">instant_messaging</span><span class="p">,</span> <span class="n">proto</span><span class="o">.</span><span class="n">MarshalOptions</span><span class="p">{})</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="n">any</span>
<span class="p">}</span>

<span class="c">// if we know which message type it is.</span>
<span class="k">func</span> <span class="n">BasicUnMarshallAnyToKnown</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">sm</span> <span class="o">:=</span> <span class="n">basic</span><span class="o">.</span><span class="n">SocialMedia</span><span class="p">{</span>
		<span class="n">SocialMediaPlatform</span><span class="o">:</span> <span class="s">"Fb"</span><span class="p">,</span>
		<span class="n">SocialMediaUsername</span><span class="o">:</span> <span class="s">"tt"</span><span class="p">,</span>
	<span class="p">}</span>
	<span class="k">var</span> <span class="n">a</span> <span class="n">anypb</span><span class="o">.</span><span class="n">Any</span>
	<span class="n">anypb</span><span class="o">.</span><span class="n">MarshalFrom</span><span class="p">(</span><span class="o">&amp;</span><span class="n">a</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">sm</span><span class="p">,</span> <span class="n">proto</span><span class="o">.</span><span class="n">MarshalOptions</span><span class="p">{})</span>
	<span class="n">smedia</span> <span class="o">:=</span> <span class="n">basic</span><span class="o">.</span><span class="n">SocialMedia</span><span class="p">{}</span>

	<span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">a</span><span class="o">.</span><span class="n">UnmarshalTo</span><span class="p">(</span><span class="o">&amp;</span><span class="n">smedia</span><span class="p">);</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="k">return</span>
	<span class="p">}</span>
	<span class="n">json</span><span class="p">,</span> <span class="n">_</span> <span class="o">:=</span> <span class="n">protojson</span><span class="o">.</span><span class="n">Marshal</span><span class="p">(</span><span class="o">&amp;</span><span class="n">sm</span><span class="p">)</span>
	<span class="n">log</span><span class="o">.</span><span class="n">Print</span><span class="p">(</span><span class="kt">string</span><span class="p">(</span><span class="n">json</span><span class="p">))</span>
<span class="p">}</span>

<span class="c">//if we do not know message type</span>
<span class="k">func</span> <span class="n">BasicUnMarshallAnyToUnknown</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">anon</span> <span class="o">:=</span> <span class="n">randomCommunicationChanel</span><span class="p">()</span>

	<span class="k">var</span> <span class="n">anonUnmarshalled</span> <span class="n">protoreflect</span><span class="o">.</span><span class="n">ProtoMessage</span>

	<span class="n">anonUnmarshalled</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">anon</span><span class="o">.</span><span class="n">UnmarshalNew</span><span class="p">()</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="k">return</span>
	<span class="p">}</span>
	<span class="n">log</span><span class="o">.</span><span class="n">Print</span><span class="p">(</span><span class="s">"Unmarshall as a "</span><span class="p">,</span> <span class="n">anonUnmarshalled</span><span class="o">.</span><span class="n">ProtoReflect</span><span class="p">()</span><span class="o">.</span><span class="n">Descriptor</span><span class="p">()</span><span class="o">.</span><span class="n">Name</span><span class="p">())</span>
	<span class="n">json</span><span class="p">,</span> <span class="n">_</span> <span class="o">:=</span> <span class="n">protojson</span><span class="o">.</span><span class="n">Marshal</span><span class="p">(</span><span class="n">anonUnmarshalled</span><span class="p">)</span>
	<span class="n">log</span><span class="o">.</span><span class="n">Print</span><span class="p">(</span><span class="kt">string</span><span class="p">(</span><span class="n">json</span><span class="p">))</span>
<span class="p">}</span>


</code></pre></div></div> <h2 id="oneof">Oneof</h2> <p>Allow only X, Y, or custom_filed. It uses $oneof$ keyword to define.</p> <div class="language-protobuf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">message</span> <span class="nc">User</span> <span class="p">{</span>
    <span class="k">oneof</span> <span class="n">electronic_comm_channel</span> <span class="p">{</span>
        <span class="n">SocialMedia</span> <span class="na">social_media</span> <span class="o">=</span> <span class="mi">20</span> <span class="p">[</span><span class="na">json_name</span> <span class="o">=</span> <span class="s">"social_media"</span><span class="p">];</span>
        <span class="n">InstantMessaging</span> <span class="na">instant_messaging</span> <span class="o">=</span> <span class="mi">21</span> <span class="p">[</span><span class="na">json_name</span> <span class="o">=</span> <span class="s">"instant_messaging"</span><span class="p">];</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// oneof example</span>
<span class="k">func</span> <span class="n">BasicOneof</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">sm</span> <span class="o">:=</span> <span class="n">basic</span><span class="o">.</span><span class="n">SocialMedia</span><span class="p">{</span>
		<span class="n">SocialMediaPlatform</span><span class="o">:</span> <span class="s">"X"</span><span class="p">,</span>
		<span class="n">SocialMediaUsername</span><span class="o">:</span> <span class="s">"Charlie"</span><span class="p">,</span>
	<span class="p">}</span>

	<span class="n">ecom_chan</span> <span class="o">:=</span> <span class="n">basic</span><span class="o">.</span><span class="n">User_SocialMedia</span><span class="p">{</span>
		<span class="n">SocialMedia</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">sm</span><span class="p">,</span>
	<span class="p">}</span>

	<span class="n">user</span> <span class="o">:=</span> <span class="n">basic</span><span class="o">.</span><span class="n">User</span><span class="p">{</span>
		<span class="n">Id</span><span class="o">:</span>                    <span class="m">11</span><span class="p">,</span>
		<span class="n">Username</span><span class="o">:</span>              <span class="s">"LaLa"</span><span class="p">,</span>
		<span class="n">IsActive</span><span class="o">:</span>              <span class="no">true</span><span class="p">,</span>
		<span class="n">Password</span><span class="o">:</span>              <span class="p">[]</span><span class="kt">byte</span><span class="p">(</span><span class="s">"Rango"</span><span class="p">),</span>
		<span class="n">Gender</span><span class="o">:</span>                <span class="n">basic</span><span class="o">.</span><span class="n">Gender_GENDER_MALE</span><span class="p">,</span>
		<span class="n">Emails</span><span class="o">:</span>                <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">"test@mai.com"</span><span class="p">,</span> <span class="s">"test2@mail.com"</span><span class="p">},</span>
		<span class="n">ElectronicCommChannel</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">ecom_chan</span><span class="p">,</span>
	<span class="p">}</span>
	<span class="n">json</span><span class="p">,</span> <span class="n">_</span> <span class="o">:=</span> <span class="n">protojson</span><span class="o">.</span><span class="n">Marshal</span><span class="p">(</span><span class="o">&amp;</span><span class="n">user</span><span class="p">)</span>
	<span class="n">log</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="kt">string</span><span class="p">(</span><span class="n">json</span><span class="p">))</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="map">Map</h2> <p>Its a key-value data structure. Protobuf also supports map data structure.</p> <div class="language-protobuf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">message</span> <span class="nc">User</span> <span class="p">{</span>
    <span class="n">map</span> <span class="o">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">uint32</span><span class="err">&gt;</span> <span class="na">skill_rating</span> <span class="o">=</span> <span class="mi">22</span> <span class="p">[</span><span class="na">json_name</span><span class="o">=</span><span class="s">"skill_rating"</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div></div> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">skill_rating</span> <span class="o">:=</span> <span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">uint32</span><span class="p">{</span><span class="s">"swim"</span><span class="o">:</span> <span class="m">8</span><span class="p">,</span> <span class="s">"fly"</span><span class="o">:</span> <span class="m">9</span><span class="p">,</span> <span class="s">"drive"</span><span class="o">:</span> <span class="m">10</span><span class="p">}</span>
<span class="n">user</span> <span class="o">:=</span> <span class="n">User</span><span class="p">{</span>
    <span class="n">SkillRating</span><span class="o">:</span> <span class="n">skill_rating</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="readwrite-to-disk">Read/Write to Disk</h2> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code>

<span class="c">// write to file</span>
<span class="k">func</span> <span class="n">WriteUserToFile</span><span class="p">(</span><span class="n">user</span> <span class="n">proto</span><span class="o">.</span><span class="n">Message</span><span class="p">,</span> <span class="n">filename</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">bytes</span><span class="p">,</span> <span class="n">_</span> <span class="o">:=</span> <span class="n">proto</span><span class="o">.</span><span class="n">Marshal</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">ioutil</span><span class="o">.</span><span class="n">WriteFile</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">bytes</span><span class="p">,</span> <span class="m">0644</span><span class="p">);</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="n">log</span><span class="o">.</span><span class="n">Fatalln</span><span class="p">(</span><span class="s">"Error writing to file"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="n">log</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"writing to file completed"</span><span class="p">)</span>
<span class="p">}</span>

<span class="c">//Reading from file</span>
<span class="k">func</span> <span class="n">ReadUserFromDisk</span><span class="p">(</span><span class="n">dest</span> <span class="n">proto</span><span class="o">.</span><span class="n">Message</span><span class="p">,</span> <span class="n">filename</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>

	<span class="n">log</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Reading file "</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
	<span class="n">bytes</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">ioutil</span><span class="o">.</span><span class="n">ReadFile</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="n">log</span><span class="o">.</span><span class="n">Fatalln</span><span class="p">(</span><span class="s">"Errot reading file"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
		<span class="k">return</span>
	<span class="p">}</span>
	<span class="c">// var user basic.User</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">proto</span><span class="o">.</span><span class="n">Unmarshal</span><span class="p">(</span><span class="n">bytes</span><span class="p">,</span> <span class="n">dest</span><span class="p">);</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="n">log</span><span class="o">.</span><span class="n">Fatalln</span><span class="p">(</span><span class="s">"Error on unmarshalling user"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="n">json</span><span class="p">,</span> <span class="n">_</span> <span class="o">:=</span> <span class="n">protojson</span><span class="o">.</span><span class="n">Marshal</span><span class="p">(</span><span class="n">dest</span><span class="p">)</span>
	<span class="n">log</span><span class="o">.</span><span class="n">Print</span><span class="p">(</span><span class="kt">string</span><span class="p">(</span><span class="n">json</span><span class="p">))</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="readwrite-as-json">Read/Write as JSON</h2> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c">//write as a json</span>
<span class="k">func</span> <span class="n">WriteAsJson</span><span class="p">(</span><span class="n">msg</span> <span class="n">proto</span><span class="o">.</span><span class="n">Message</span><span class="p">,</span> <span class="n">filename</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">jsonBytes</span><span class="p">,</span> <span class="n">_</span> <span class="o">:=</span> <span class="n">protojson</span><span class="o">.</span><span class="n">Marshal</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">ioutil</span><span class="o">.</span><span class="n">WriteFile</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">jsonBytes</span><span class="p">,</span> <span class="m">0644</span><span class="p">);</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="n">log</span><span class="o">.</span><span class="n">Fatalln</span><span class="p">(</span><span class="s">"could not write to file "</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
		<span class="k">return</span>
	<span class="p">}</span>
	<span class="n">log</span><span class="o">.</span><span class="n">Print</span><span class="p">(</span><span class="s">"Writing file is completed."</span><span class="p">)</span>
<span class="p">}</span>

<span class="c">//read as jsom and print</span>
<span class="k">func</span> <span class="n">ReadAsJson</span><span class="p">(</span><span class="n">dest</span> <span class="n">proto</span><span class="o">.</span><span class="n">Message</span><span class="p">,</span> <span class="n">filename</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">bytes</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">ioutil</span><span class="o">.</span><span class="n">ReadFile</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="n">log</span><span class="o">.</span><span class="n">Fatalln</span><span class="p">(</span><span class="s">"Could not read file "</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
		<span class="k">return</span>
	<span class="p">}</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">protojson</span><span class="o">.</span><span class="n">Unmarshal</span><span class="p">(</span><span class="n">bytes</span><span class="p">,</span> <span class="n">dest</span><span class="p">);</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="n">log</span><span class="o">.</span><span class="n">Fatalln</span><span class="p">(</span><span class="s">"Unmarshalling failed "</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
		<span class="k">return</span>
	<span class="p">}</span>
	<span class="n">json</span><span class="p">,</span> <span class="n">_</span> <span class="o">:=</span> <span class="n">protojson</span><span class="o">.</span><span class="n">Marshal</span><span class="p">(</span><span class="n">dest</span><span class="p">)</span>
	<span class="n">log</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="kt">string</span><span class="p">(</span><span class="n">json</span><span class="p">))</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="schema-evolution">Schema Evolution</h2> <p>it is to gracefully adapt to changes in the structure of serialized data over time, enabling compatibility and interoperability between different versions of the schema.</p> <ul> <li>Compatibility: sender and receiver might have different protobuf message definition</li> <li>Forward &amp; Backward compatibility</li> </ul> <p><code class="language-plaintext highlighter-rouge">Rules</code></p> <ul> <li>Do not change field number <code class="language-plaintext highlighter-rouge">message A { string email = 1;}</code> but, renaming is allowed because the serialization and deserialization depends on number.</li> <li>Removing fields is okay but must not be used in future. The field number and field names are better reserved. <code class="language-plaintext highlighter-rouge">message A { reserved 3; reserved "phone_number"; reserved 3 to 5; reserved 'x', 'y';}</code></li> <li>During deletion, be aware of the fact old and new binary will have differences.</li> </ul> <div class="language-protobuf highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">message</span> <span class="nc">UserContent</span> <span class="p">{</span>
  <span class="kt">uint32</span> <span class="na">user_content_id</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">[</span><span class="na">json_name</span> <span class="o">=</span> <span class="s">"user_content_id"</span><span class="p">];</span>
  <span class="kt">string</span> <span class="na">slug</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
  <span class="kt">string</span> <span class="na">title</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
  <span class="kt">string</span> <span class="na">html_content</span> <span class="o">=</span> <span class="mi">4</span> <span class="p">[</span><span class="na">json_name</span> <span class="o">=</span> <span class="s">"html_content"</span><span class="p">];</span>
  <span class="kt">uint32</span> <span class="na">author_id</span> <span class="o">=</span> <span class="mi">5</span> <span class="p">[</span><span class="na">json_name</span> <span class="o">=</span> <span class="s">"author_id"</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div></div> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//read and write content in v1 </span>
<span class="n">user_content</span> <span class="o">:=</span> <span class="n">basic</span><span class="o">.</span><span class="n">UserContent</span><span class="p">{</span>
<span class="n">UserContentId</span><span class="o">:</span> <span class="m">12</span><span class="p">,</span>
    <span class="n">Slug</span><span class="o">:</span>          <span class="s">"slug12"</span><span class="p">,</span>
    <span class="n">Title</span><span class="o">:</span>         <span class="s">"Test content"</span><span class="p">,</span>
    <span class="n">HtmlContent</span><span class="o">:</span>   <span class="s">"&lt;h1&gt;Heading 1&lt;/h1&gt;"</span><span class="p">,</span>
    <span class="n">AuthorId</span><span class="o">:</span>      <span class="m">32</span><span class="p">,</span>
<span class="p">}</span>

<span class="k">var</span> <span class="n">dest</span> <span class="n">basic</span><span class="o">.</span><span class="n">UserContent</span>

<span class="n">services</span><span class="o">.</span><span class="n">WriteUserToFile</span><span class="p">(</span><span class="o">&amp;</span><span class="n">user_content</span><span class="p">,</span> <span class="s">"user_content_v1.bin"</span><span class="p">)</span>
<span class="n">services</span><span class="o">.</span><span class="n">ReadUserFromDisk</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dest</span><span class="p">,</span> <span class="s">"user_content_v1.bin"</span><span class="p">)</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">update the message UserContent add new field category</code></p> <div class="language-protobuf highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">message</span> <span class="nc">UserContent</span> <span class="p">{</span>
  <span class="kt">uint32</span> <span class="na">user_content_id</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">[</span><span class="na">json_name</span> <span class="o">=</span> <span class="s">"user_content_id"</span><span class="p">];</span>
  <span class="kt">string</span> <span class="na">slug</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
  <span class="kt">string</span> <span class="na">title</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
  <span class="kt">string</span> <span class="na">html_content</span> <span class="o">=</span> <span class="mi">4</span> <span class="p">[</span><span class="na">json_name</span> <span class="o">=</span> <span class="s">"html_content"</span><span class="p">];</span>
  <span class="kt">uint32</span> <span class="na">author_id</span> <span class="o">=</span> <span class="mi">5</span> <span class="p">[</span><span class="na">json_name</span> <span class="o">=</span> <span class="s">"author_id"</span><span class="p">];</span>
  <span class="kt">string</span> <span class="na">category</span> <span class="o">=</span> <span class="mi">6</span> <span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>Forward compatibility</p> <ul> <li>Read <code class="language-plaintext highlighter-rouge">user_content_v1.bin</code> using UserContent version 2 (writer is older / forward compatibility)</li> <li>Write user_content_v2.bin using UserContent version 2</li> <li>Read user_content_v2.bin using UserContent version 2</li> </ul> <p><code class="language-plaintext highlighter-rouge">update the message UserContent to following</code></p> <div class="language-protobuf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">message</span> <span class="nc">UserContent</span> <span class="p">{</span>
  <span class="n">reserved</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">;</span>
  <span class="kt">uint32</span> <span class="na">user_content_id</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">[</span><span class="na">json_name</span> <span class="o">=</span> <span class="s">"user_content_id"</span><span class="p">];</span>
  <span class="kt">string</span> <span class="na">slug</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
  <span class="c1">// string title = 3;</span>
  <span class="kt">string</span> <span class="na">html_content</span> <span class="o">=</span> <span class="mi">4</span> <span class="p">[</span><span class="na">json_name</span> <span class="o">=</span> <span class="s">"html_content"</span><span class="p">];</span>
  <span class="c1">// uint32 author_id = 5 [json_name = "author_id"];</span>
  <span class="kt">string</span> <span class="na">category</span> <span class="o">=</span> <span class="mi">6</span> <span class="p">;</span>
  <span class="kt">string</span> <span class="na">sub_category</span> <span class="o">=</span> <span class="mi">7</span> <span class="p">[</span><span class="na">json_name</span><span class="o">=</span><span class="s">"sub_category"</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div></div> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//readung and writing in V3</span>
<span class="n">user_content</span> <span class="o">:=</span> <span class="n">basic</span><span class="o">.</span><span class="n">UserContent</span><span class="p">{</span>
    <span class="n">UserContentId</span><span class="o">:</span> <span class="m">12</span><span class="p">,</span>
    <span class="n">Slug</span><span class="o">:</span>          <span class="s">"slug12"</span><span class="p">,</span>
    <span class="n">HtmlContent</span><span class="o">:</span>   <span class="s">"&lt;h1&gt;Heading 1&lt;/h1&gt;"</span><span class="p">,</span>
    <span class="n">Category</span><span class="o">:</span>      <span class="s">"S"</span><span class="p">,</span>
    <span class="n">SubCategory</span><span class="o">:</span>   <span class="s">"AA"</span><span class="p">,</span>
<span class="p">}</span>

<span class="k">var</span> <span class="n">dest</span> <span class="n">basic</span><span class="o">.</span><span class="n">UserContent</span>

<span class="n">services</span><span class="o">.</span><span class="n">WriteUserToFile</span><span class="p">(</span><span class="o">&amp;</span><span class="n">user_content</span><span class="p">,</span> <span class="s">"user_content_v3.bin"</span><span class="p">)</span>
<span class="n">services</span><span class="o">.</span><span class="n">ReadUserFromDisk</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dest</span><span class="p">,</span> <span class="s">"user_content_v3.bin"</span><span class="p">)</span>
</code></pre></div></div> <h2 id="additional-types">Additional types</h2> <p>Download types from following links, and place them into your directory. <a href="https://protobuf.dev/reference/protobuf/google.protobuf/"> Documentation</a> <a href="https://github.com/googleapis/googleapis/tree/master/google/type">Source files</a></p> <p>Example: <code class="language-plaintext highlighter-rouge">pkg/ pb/ google/ types/ g.proto </code></p> <p>import</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="s">"pkg/pb/google/type/date.proto"</span><span class="p">;</span>
<span class="k">import</span> <span class="s">"pkg/pb/google/type/latlng.proto"</span><span class="p">;</span>

<span class="n">message</span> <span class="n">User</span> <span class="p">{</span>
    <span class="n">google</span><span class="o">.</span><span class="k">type</span><span class="o">.</span><span class="n">Date</span> <span class="n">birth_date</span>  <span class="o">=</span> <span class="m">24</span> <span class="p">[</span><span class="n">json_name</span> <span class="o">=</span> <span class="s">"birth_date"</span><span class="p">];</span>
    <span class="n">google</span><span class="o">.</span><span class="k">type</span><span class="o">.</span><span class="n">LatLng</span> <span class="n">last_known_location</span> <span class="o">=</span> <span class="m">25</span> <span class="p">[</span><span class="n">json_name</span> <span class="o">=</span> <span class="s">"last_known_location"</span><span class="p">];</span>
<span class="p">}</span>

<span class="c">//usage</span>
<span class="n">user</span> <span class="o">:=</span> <span class="n">basic</span><span class="o">.</span><span class="n">User</span><span class="p">{</span>
    <span class="n">Id</span><span class="o">:</span>                    <span class="m">11</span><span class="p">,</span>
    <span class="n">Username</span><span class="o">:</span>              <span class="s">"LaLa"</span><span class="p">,</span>
    <span class="n">SkillRating</span><span class="o">:</span>           <span class="n">skill_rating</span><span class="p">,</span>
    <span class="n">LastLogin</span><span class="o">:</span>             <span class="n">timestamppb</span><span class="o">.</span><span class="n">Now</span><span class="p">(),</span>
    <span class="n">BirthDate</span><span class="o">:</span>             <span class="o">&amp;</span><span class="n">date</span><span class="o">.</span><span class="n">Date</span><span class="p">{</span><span class="n">Year</span><span class="o">:</span> <span class="m">2000</span><span class="p">,</span> <span class="n">Month</span><span class="o">:</span> <span class="m">5</span><span class="p">,</span> <span class="n">Day</span><span class="o">:</span> <span class="m">27</span><span class="p">},</span>
    <span class="n">LastKnownLocation</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">latlng</span><span class="o">.</span><span class="n">LatLng</span><span class="p">{</span>
        <span class="n">Latitude</span><span class="o">:</span>  <span class="o">-</span><span class="m">6.29847717</span><span class="p">,</span>
        <span class="n">Longitude</span><span class="o">:</span> <span class="m">106.8290577</span><span class="p">,</span>
    <span class="p">},</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="validate"><a href="https://github.com/bufbuild/protoc-gen-validate">Validate</a></h2> <p>Comming soon !!</p>]]></content><author><name></name></author><category term="software-engineering"/><category term="swe"/><summary type="html"><![CDATA[A guide on Protobuf]]></summary></entry><entry><title type="html">Go</title><link href="https://pvsnp9.github.io/blog/2023/go-cheatsheet/" rel="alternate" type="text/html" title="Go"/><published>2023-12-13T00:00:00+00:00</published><updated>2023-12-13T00:00:00+00:00</updated><id>https://pvsnp9.github.io/blog/2023/go-cheatsheet</id><content type="html" xml:base="https://pvsnp9.github.io/blog/2023/go-cheatsheet/"><![CDATA[<p>Go, also known as Golang, is a programming language developed by Google with a focus on simplicity, efficiency, and concurrency. Its clean syntax and static typing contribute to code readability and early error detection. Go promotes concurrent programming through lightweight threads called goroutines and channels for communication between them. The language features automatic garbage collection, reducing the burden on developers for memory management. Go’s standard library is robust, covering a wide range of tasks, and the language is cross-platform, allowing for seamless deployment across different operating systems. With a compiled nature, Go produces a single binary executable, simplifying distribution.</p> <h2 id="basics">Basics</h2> <p>create a simple program and run.</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="s">"fmt"</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">message</span> <span class="o">:=</span> <span class="n">greetMe</span><span class="p">(</span><span class="s">"world"</span><span class="p">)</span>
  <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">greetMe</span><span class="p">(</span><span class="n">name</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
  <span class="k">return</span> <span class="s">"Hello, "</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="s">"!"</span>
<span class="p">}</span>
</code></pre></div></div> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go run hello.go
</code></pre></div></div> <h3 id="built-in-data-types">Built-in data types</h3> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>| ------------ | --------------------------------------------- |
| String       | Numbers                                       | 
| ------------ | --------------------------------------------- |
| str = "hello"| byte, rune (char)                             |
| typname 'str'| int, int8, int16, int32, int64                |
|              | uint, uint8, uint16, uint32, uint64,  uintptr |
|              | float32, float64, complex64, complex128       |
| ------------ | --------------------------------------------- |
</code></pre></div></div> <h3 id="type-conversion">Type conversion</h3> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="n">i</span> <span class="kt">int</span> <span class="o">=</span> <span class="m">42</span>
<span class="k">var</span> <span class="n">f</span> <span class="kt">float64</span> <span class="o">=</span> <span class="kt">float64</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
<span class="k">var</span> <span class="n">u</span> <span class="kt">uint</span> <span class="o">=</span> <span class="kt">uint</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
<span class="c">// alternative syntax</span>
<span class="n">i</span> <span class="o">:=</span> <span class="m">42</span>
<span class="n">f</span> <span class="o">:=</span> <span class="kt">float64</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
<span class="n">u</span> <span class="o">:=</span> <span class="kt">uint</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</code></pre></div></div> <h2 id="control-structure">Control structure</h2> <h3 id="if-cond">if cond.</h3> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
 <span class="c">// Basic one</span>
 <span class="k">if</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="m">0</span> <span class="p">{</span>
 <span class="k">return</span> <span class="n">x</span>
 <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
 <span class="k">return</span> <span class="o">-</span><span class="n">x</span>
 <span class="p">}</span>
 <span class="c">// You can put one statement before the condition</span>
 <span class="k">if</span> <span class="n">a</span> <span class="o">:=</span> <span class="n">b</span> <span class="o">+</span> <span class="n">c</span><span class="p">;</span> <span class="n">a</span> <span class="o">&lt;</span> <span class="m">42</span> <span class="p">{</span>
 <span class="k">return</span> <span class="n">a</span>
 <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
 <span class="k">return</span> <span class="n">a</span> <span class="o">-</span> <span class="m">42</span>
 <span class="p">}</span>
 <span class="c">// Type assertion inside if</span>
 <span class="k">var</span> <span class="n">val</span> <span class="k">interface</span><span class="p">{}</span>
 <span class="n">val</span> <span class="o">=</span> <span class="s">"foo"</span>
 <span class="k">if</span> <span class="n">str</span><span class="p">,</span> <span class="n">ok</span> <span class="o">:=</span> <span class="n">val</span><span class="o">.</span><span class="p">(</span><span class="kt">string</span><span class="p">);</span> <span class="n">ok</span> <span class="p">{</span>
 <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
 <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div> <h3 id="loop">Loop</h3> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// There's only `for`. No `while`, no `until`</span>
 <span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="m">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="m">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">{</span>
 <span class="p">}</span>
 <span class="k">for</span> <span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="m">10</span><span class="p">;</span> <span class="p">{</span> <span class="c">// while loop</span>
 <span class="p">}</span>
 <span class="k">for</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="m">10</span> <span class="p">{</span> <span class="c">// can omit semicolons if there's only a condition</span>
 <span class="p">}</span>
 <span class="k">for</span> <span class="p">{</span> <span class="c">// can omit the condition ~ while (true)</span>
 <span class="p">}</span>
</code></pre></div></div> <h3 id="switch">Switch</h3> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c">// switch statement</span>
 <span class="k">switch</span> <span class="n">operatingSystem</span> <span class="p">{</span>
 <span class="k">case</span> <span class="s">"darwin"</span><span class="o">:</span>
 <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Mac OS Hipster"</span><span class="p">)</span>
 <span class="c">// cases break automatically, no fallthrough by default</span>
 <span class="k">case</span> <span class="s">"linux"</span><span class="o">:</span>
 <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Linux Geek"</span><span class="p">)</span>
 <span class="k">default</span><span class="o">:</span>
 <span class="c">// Windows, BSD, ...</span>
 <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Other"</span><span class="p">)</span>
 <span class="p">}</span>
 <span class="c">// As with for and if, an assignment statement before the</span>
 <span class="c">// switch value is allowed</span>
 <span class="k">switch</span> <span class="n">os</span> <span class="o">:=</span> <span class="n">runtime</span><span class="o">.</span><span class="n">GOOS</span><span class="p">;</span> <span class="n">os</span> <span class="p">{</span>
 <span class="k">case</span> <span class="s">"darwin"</span><span class="o">:</span> <span class="o">...</span>
 <span class="p">}</span>
</code></pre></div></div> <h2 id="array-and-slices">Array and slices</h2> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="n">a</span> <span class="p">[</span><span class="m">10</span><span class="p">]</span><span class="kt">int</span> <span class="c">// int array with length 10. Length is part of type!</span>
<span class="n">a</span><span class="p">[</span><span class="m">3</span><span class="p">]</span> <span class="o">=</span> <span class="m">42</span> <span class="c">// set elements</span>
<span class="n">i</span> <span class="o">:=</span> <span class="n">a</span><span class="p">[</span><span class="m">3</span><span class="p">]</span> <span class="c">// read elements</span>
<span class="c">// declare and initialize</span>
<span class="k">var</span> <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="m">2</span><span class="p">]</span><span class="kt">int</span><span class="p">{</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">}</span>
<span class="n">a</span> <span class="o">:=</span> <span class="p">[</span><span class="m">2</span><span class="p">]</span><span class="kt">int</span><span class="p">{</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">}</span> <span class="c">//shorthand</span>
<span class="n">a</span> <span class="o">:=</span> <span class="p">[</span><span class="o">...</span><span class="p">]</span><span class="kt">int</span><span class="p">{</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">}</span> <span class="c">// elipsis -&gt; Compiler figures out array length</span>
</code></pre></div></div> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Slices</span>
<span class="k">var</span> <span class="n">a</span> <span class="p">[]</span><span class="kt">int</span> <span class="c">// a slice – like an array, but length is unspecified</span>
<span class="k">var</span> <span class="n">a</span> <span class="o">=</span> <span class="p">[]</span><span class="kt">int</span> <span class="p">{</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">4</span><span class="p">}</span> <span class="c">// declare and initialize a slice</span>
 <span class="c">// (backed by given array implicitly)</span>
<span class="n">a</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">4</span><span class="p">}</span> <span class="c">// shorthand</span>
<span class="n">chars</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="m">0</span><span class="o">:</span><span class="s">"a"</span><span class="p">,</span> <span class="m">2</span><span class="o">:</span><span class="s">"c"</span><span class="p">,</span> <span class="m">1</span><span class="o">:</span><span class="s">"b"</span><span class="p">}</span> <span class="c">// ["a", "b", "c"]</span>
<span class="k">var</span> <span class="n">b</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">lo</span><span class="o">:</span><span class="n">hi</span><span class="p">]</span> <span class="c">// creates a slice (view of the array) from</span>
 <span class="c">// index lo to hi-1</span>
<span class="k">var</span> <span class="n">b</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="m">1</span><span class="o">:</span><span class="m">4</span><span class="p">]</span> <span class="c">// slice from index 1 to 3</span>
<span class="k">var</span> <span class="n">b</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="o">:</span><span class="m">3</span><span class="p">]</span> <span class="c">// missing low index implies 0</span>
<span class="k">var</span> <span class="n">b</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="m">3</span><span class="o">:</span><span class="p">]</span> <span class="c">// missing high index implies len(a)</span>
</code></pre></div></div> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// create a slice with make</span>
<span class="n">a</span> <span class="o">=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">5</span><span class="p">)</span> <span class="c">// first arg length, second capacity</span>
<span class="n">a</span> <span class="o">=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="m">5</span><span class="p">)</span> <span class="c">// capacity is optional</span>

</code></pre></div></div> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// create a slice from an array</span>
<span class="n">x</span> <span class="o">:=</span> <span class="p">[</span><span class="m">3</span><span class="p">]</span><span class="kt">string</span><span class="p">{</span><span class="s">"Rango"</span><span class="p">,</span> <span class="s">"Maven"</span><span class="p">,</span> <span class="s">"Java"</span><span class="p">}</span>
<span class="n">s</span> <span class="o">:=</span> <span class="n">x</span><span class="p">[</span><span class="o">:</span><span class="p">]</span> <span class="c">// a slice referencing the storage of x</span>

<span class="n">Operations</span> <span class="n">on</span> <span class="n">Arrays</span> <span class="n">and</span> <span class="n">Slices</span>

<span class="nb">len</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="c">//gives you the length of an array/a slice. It's a built-in function, not a attribute method</span>
<span class="n">on</span> <span class="n">the</span> <span class="n">array</span><span class="o">.</span>
<span class="c">// loop over an array/a slice</span>
<span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">e</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">a</span> <span class="p">{</span>
 <span class="c">// i is the index, e the element</span>
<span class="p">}</span>
<span class="c">// if you only need e:</span>
<span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">e</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">a</span> <span class="p">{</span>
 <span class="c">// e is the element</span>
<span class="p">}</span>
<span class="c">// ...and if you only need the index</span>
<span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">a</span> <span class="p">{</span>
<span class="p">}</span>
<span class="c">// In Go pre-1.4, it is a compiler error to not use i and e.</span>
<span class="c">// Go 1.4 introduced a variable-free form:</span>
<span class="k">for</span> <span class="k">range</span> <span class="n">time</span><span class="o">.</span><span class="n">Tick</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">Second</span><span class="p">)</span> <span class="p">{</span>
 <span class="c">// do it once a sec</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="maps">Maps</h2> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="n">m</span> <span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">int</span> <span class="c">//{key(strint): value(int)}</span>
<span class="n">m</span> <span class="o">=</span> <span class="nb">make</span><span class="p">(</span><span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">int</span><span class="p">)</span>
<span class="n">m</span><span class="p">[</span><span class="s">"key"</span><span class="p">]</span> <span class="o">=</span> <span class="m">42</span>
<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">m</span><span class="p">[</span><span class="s">"key"</span><span class="p">])</span>
<span class="nb">delete</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="s">"key"</span><span class="p">)</span>
<span class="n">elem</span><span class="p">,</span> <span class="n">ok</span> <span class="o">:=</span> <span class="n">m</span><span class="p">[</span><span class="s">"key"</span><span class="p">]</span> <span class="c">// test if key "key" is present, retrieve if so</span>
<span class="c">// map literal</span>
<span class="k">var</span> <span class="n">m</span> <span class="o">=</span> <span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="n">Vertex</span><span class="p">{</span>
 <span class="s">"Bell Labs"</span><span class="o">:</span> <span class="p">{</span><span class="m">40.68433</span><span class="p">,</span> <span class="o">-</span><span class="m">74.39967</span><span class="p">},</span>
 <span class="s">"Google"</span><span class="o">:</span> <span class="p">{</span><span class="m">37.42202</span><span class="p">,</span> <span class="o">-</span><span class="m">122.08408</span><span class="p">},</span>
<span class="p">}</span>

</code></pre></div></div> <h2 id="structs">Structs</h2> <p>In go, the concept of class does not exist, but struct can have methods.</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// A struct is a type. It's also a collection of fields</span>
<span class="c">// Declaration</span>
<span class="k">type</span> <span class="n">Vector</span> <span class="k">struct</span> <span class="p">{</span>
 <span class="n">X</span><span class="p">,</span> <span class="n">Y</span> <span class="kt">int</span>
<span class="p">}</span>
<span class="c">// Creating</span>
<span class="k">var</span> <span class="n">v</span> <span class="o">=</span> <span class="n">Vector</span><span class="p">{</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">}</span>
<span class="k">var</span> <span class="n">v</span> <span class="o">=</span> <span class="n">Vector</span><span class="p">{</span><span class="n">X</span><span class="o">:</span> <span class="m">1</span><span class="p">,</span> <span class="n">Y</span><span class="o">:</span> <span class="m">2</span><span class="p">}</span> <span class="c">// Creates a struct by defining values</span>
 <span class="c">// with keys</span>
<span class="c">// Accessing members</span>
<span class="n">v</span><span class="o">.</span><span class="n">X</span> <span class="o">=</span> <span class="m">4</span>
<span class="c">// You can declare methods on structs. The struct you want to declare</span>
<span class="c">// the method on (the receiving type) comes between the func keyword</span>
<span class="c">// and the method name. The struct is copied on each method call(!)</span>
<span class="k">func</span> <span class="p">(</span><span class="n">v</span> <span class="n">Vector</span><span class="p">)</span> <span class="n">Abs</span><span class="p">()</span> <span class="kt">float64</span> <span class="p">{</span>
 <span class="k">return</span> <span class="n">math</span><span class="o">.</span><span class="n">Sqrt</span><span class="p">(</span><span class="n">v</span><span class="o">.</span><span class="n">X</span><span class="o">*</span><span class="n">v</span><span class="o">.</span><span class="n">X</span> <span class="o">+</span> <span class="n">v</span><span class="o">.</span><span class="n">Y</span><span class="o">*</span><span class="n">v</span><span class="o">.</span><span class="n">Y</span><span class="p">)</span>
<span class="p">}</span>
<span class="c">// Call method</span>
<span class="n">v</span><span class="o">.</span><span class="n">Abs</span><span class="p">()</span>
<span class="c">// For mutating methods, you need to use a pointer (see below) to the</span>
<span class="c">// Struct as the type. With this, the struct value is not copied for</span>
<span class="c">// the method call.</span>
<span class="k">func</span> <span class="p">(</span><span class="n">v</span> <span class="o">*</span><span class="n">Vector</span><span class="p">)</span> <span class="n">add</span><span class="p">(</span><span class="n">n</span> <span class="kt">float64</span><span class="p">)</span> <span class="p">{</span>
 <span class="n">v</span><span class="o">.</span><span class="n">X</span> <span class="o">+=</span> <span class="n">n</span>
 <span class="n">v</span><span class="o">.</span><span class="n">Y</span> <span class="o">+=</span> <span class="n">n</span>
<span class="p">}</span>

<span class="c">// Anonymous structs</span>
<span class="n">Cheaper</span> <span class="n">and</span> <span class="n">safer</span> <span class="n">than</span> <span class="n">using</span> <span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="k">interface</span><span class="p">{}</span><span class="o">.</span>
<span class="n">point</span> <span class="o">:=</span> <span class="k">struct</span> <span class="p">{</span>
 <span class="n">name</span><span class="p">,</span> <span class="n">email</span> <span class="kt">string</span>
<span class="p">}{</span><span class="s">"delta"</span><span class="p">,</span> <span class="s">"delta.d@mail.com"</span><span class="p">}</span>
</code></pre></div></div> <h2 id="pointers">Pointers</h2> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">p</span> <span class="o">:=</span> <span class="n">Vector</span><span class="p">{</span><span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">}</span> <span class="c">// p is a Vector</span>
<span class="n">q</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">p</span> <span class="c">// q is a pointer to a Vector</span>
<span class="n">r</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">Vector</span><span class="p">{</span><span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">}</span> <span class="c">// r is also a pointer to a Vector</span>
<span class="c">// The type of a pointer to a Vector is *Vector</span>
<span class="k">var</span> <span class="n">s</span> <span class="o">*</span><span class="n">Vector</span> <span class="o">=</span> <span class="nb">new</span><span class="p">(</span><span class="n">Vector</span><span class="p">)</span> <span class="c">// create ptr to a new struct instance</span>
</code></pre></div></div> <h2 id="interface">Interface</h2> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// interface declaration</span>
<span class="k">type</span> <span class="n">Delta</span> <span class="k">interface</span> <span class="p">{</span>
 <span class="n">Unit</span><span class="p">()</span> <span class="kt">float64</span>
 <span class="n">Division</span><span class="p">()</span> <span class="kt">string</span> 
<span class="p">}</span>
<span class="c">// types Operation *not* declare to implement interfaces</span>

<span class="k">type</span> <span class="n">Operation</span> <span class="k">struct</span> <span class="p">{</span>
  <span class="n">commander</span> <span class="kt">string</span>
  <span class="n">obj_one</span> <span class="kt">float64</span>
  <span class="n">obj_two</span> <span class="kt">int</span>
<span class="p">}</span>
<span class="c">/* instead, types implicitly satisfy an interface if they implement all 
required methods*/</span>
<span class="k">func</span> <span class="p">(</span><span class="n">op</span> <span class="n">Operation</span><span class="p">)</span> <span class="n">Unit</span><span class="p">()</span> <span class="kt">float64</span> <span class="p">{</span>
  <span class="k">return</span> <span class="n">op</span><span class="o">.</span><span class="n">obj_one</span> <span class="o">*</span> <span class="n">obj_two</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">op</span> <span class="n">Operation</span><span class="p">)</span> <span class="n">Division</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
  <span class="k">return</span> <span class="s">"Air"</span>
<span class="p">}</span>

</code></pre></div></div> <h2 id="embedding">Embedding</h2> <p>There is no inheritance in Go. Instead, there is interface and struct embedding (composition).</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c">// ReadWriter implementations must satisfy both Reader and Writer</span>
<span class="k">type</span> <span class="n">ReadWriter</span> <span class="k">interface</span> <span class="p">{</span>
 <span class="n">Reader</span>
 <span class="n">Writer</span>
<span class="p">}</span>
<span class="c">// Server exposes all the methods that Logger has</span>
<span class="k">type</span> <span class="n">Server</span> <span class="k">struct</span> <span class="p">{</span>
 <span class="n">Host</span> <span class="kt">string</span>
 <span class="n">Port</span> <span class="kt">int</span>
 <span class="o">*</span><span class="n">log</span><span class="o">.</span><span class="n">Logger</span>
<span class="p">}</span>
<span class="c">// initialize the embedded type the usual way</span>
<span class="n">server</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">Server</span><span class="p">{</span><span class="s">"localhost"</span><span class="p">,</span> <span class="m">80</span><span class="p">,</span> <span class="n">log</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="o">...</span><span class="p">)}</span>
<span class="c">// methods implemented on the embedded struct are passed through</span>
<span class="n">server</span><span class="o">.</span><span class="n">Log</span><span class="p">(</span><span class="o">...</span><span class="p">)</span> <span class="c">// calls server.Logger.Log(...)</span>
<span class="c">// Field name of an embedded type is its type name ('Logger' here)</span>
<span class="k">var</span> <span class="n">logger</span> <span class="o">*</span><span class="n">log</span><span class="o">.</span><span class="n">Logger</span> <span class="o">=</span> <span class="n">server</span><span class="o">.</span><span class="n">Logger</span>

</code></pre></div></div> <h2 id="package">Package</h2> <ul> <li>declared at the top of every source file</li> <li>executables are in package main</li> <li>upper case identifier: exported (visible from other packages)</li> <li>lower case identifier: private (not visible from other packages)</li> </ul> <h2 id="functions">Functions</h2> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// a simple function</span>
<span class="k">func</span> <span class="n">Operation</span><span class="p">()</span> <span class="p">{}</span>
<span class="c">// function with parameters (again, types go after identifiers)</span>
<span class="k">func</span> <span class="n">Operation</span><span class="p">(</span><span class="n">param1</span> <span class="kt">string</span><span class="p">,</span> <span class="n">param2</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{}</span>
<span class="c">// multiple parameters of the same type</span>
<span class="k">func</span> <span class="n">Operation</span><span class="p">(</span><span class="n">param1</span><span class="p">,</span> <span class="n">param2</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{}</span>

<span class="c">// return type declaration</span>
<span class="k">func</span> <span class="n">Operation</span><span class="p">()</span> <span class="kt">int</span> <span class="p">{</span>
 <span class="k">return</span> <span class="m">42</span>
<span class="p">}</span>
<span class="c">// Can return multiple values at once</span>
<span class="k">func</span> <span class="n">returnMulti</span><span class="p">()</span> <span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
 <span class="k">return</span> <span class="m">42</span><span class="p">,</span> <span class="s">"foobar"</span>
<span class="p">}</span>
<span class="k">var</span> <span class="n">x</span><span class="p">,</span> <span class="n">str</span> <span class="o">=</span> <span class="n">returnMulti</span><span class="p">()</span>
<span class="c">// Return multiple named results simply by return</span>
<span class="k">func</span> <span class="n">returnMulti2</span><span class="p">()</span> <span class="p">(</span><span class="n">n</span> <span class="kt">int</span><span class="p">,</span> <span class="n">s</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
 <span class="n">n</span> <span class="o">=</span> <span class="m">42</span>
 <span class="n">s</span> <span class="o">=</span> <span class="s">"foobar"</span>
 <span class="c">// n and s will be returned</span>
 <span class="k">return</span>
<span class="p">}</span>
<span class="k">var</span> <span class="n">x</span><span class="p">,</span> <span class="n">str</span> <span class="o">=</span> <span class="n">returnMulti2</span><span class="p">()</span>

<span class="c">// named return </span>
<span class="k">func</span> <span class="n">named_return</span><span class="p">(</span><span class="n">para</span> <span class="kt">int</span><span class="p">)</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="kt">int</span><span class="p">){</span>
  <span class="n">x</span> <span class="o">=</span> <span class="n">para</span> <span class="o">-</span><span class="m">1</span>
  <span class="n">y</span> <span class="o">=</span> <span class="n">praa</span><span class="o">*</span> <span class="m">2</span>

  <span class="k">return</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="functions-as-values-and-closures">Functions as values and closures</h3> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
 <span class="c">// assign a function to a name Lambda</span>
 <span class="n">add</span> <span class="o">:=</span> <span class="k">func</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
 <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
 <span class="p">}</span>
 <span class="c">// use the name to call the function</span>
 <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">add</span><span class="p">(</span><span class="m">3</span><span class="p">,</span> <span class="m">4</span><span class="p">))</span>
<span class="p">}</span>
<span class="c">// Closures, lexically scoped: Functions can access values that were</span>
<span class="c">// in scope when defining the function</span>
<span class="k">func</span> <span class="n">scope</span><span class="p">()</span> <span class="k">func</span><span class="p">()</span> <span class="kt">int</span><span class="p">{</span>
 <span class="n">outer_var</span> <span class="o">:=</span> <span class="m">2</span>
 <span class="n">foo</span> <span class="o">:=</span> <span class="k">func</span><span class="p">()</span> <span class="kt">int</span> <span class="p">{</span> <span class="k">return</span> <span class="n">outer_var</span><span class="p">}</span>
 <span class="k">return</span> <span class="n">foo</span>
<span class="p">}</span>
<span class="k">func</span> <span class="n">another_scope</span><span class="p">()</span> <span class="k">func</span><span class="p">()</span> <span class="kt">int</span><span class="p">{</span>
 <span class="c">// won't compile - outer_var and foo not defined in this scope</span>
 <span class="n">outer_var</span> <span class="o">=</span> <span class="m">444</span>
 <span class="k">return</span> <span class="n">foo</span>
<span class="p">}</span>
<span class="c">// Closures: don't mutate outer vars, instead redefine them!</span>
<span class="k">func</span> <span class="n">outer</span><span class="p">()</span> <span class="p">(</span><span class="k">func</span><span class="p">()</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
 <span class="n">outer_var</span> <span class="o">:=</span> <span class="m">2</span> <span class="c">// NOTE outer_var is outside inner's scope</span>
 <span class="n">inner</span> <span class="o">:=</span> <span class="k">func</span><span class="p">()</span> <span class="kt">int</span> <span class="p">{</span>
 <span class="n">outer_var</span> <span class="o">+=</span> <span class="m">99</span> <span class="c">// attempt to mutate outer_var</span>
 <span class="k">return</span> <span class="n">outer_var</span> <span class="c">// =&gt; 101 (but outer_var is a newly redefined</span>
 <span class="c">// variable visible only inside inner)</span>
 <span class="p">}</span>
 <span class="k">return</span> <span class="n">inner</span><span class="p">,</span> <span class="n">outer_var</span> <span class="c">// =&gt; 101, 2 (still!)</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="variadic-functios">Variadic functios</h3> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
 <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">adder</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">))</span> <span class="c">// 6</span>
 <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">adder</span><span class="p">(</span><span class="m">9</span><span class="p">,</span> <span class="m">9</span><span class="p">))</span> <span class="c">// 18</span>
 <span class="n">nums</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="m">10</span><span class="p">,</span> <span class="m">20</span><span class="p">,</span> <span class="m">30</span><span class="p">}</span>
 <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">adder</span><span class="p">(</span><span class="n">nums</span><span class="o">...</span><span class="p">))</span> <span class="c">// 60</span>
<span class="p">}</span>
<span class="c">// Using ... before the type name of the last parameter indicates</span>
<span class="c">// that it takes zero or more of those parameters.</span>
<span class="c">// The function is invoked like any other function except we can</span>
<span class="c">// pass as many arguments as we want.</span>
<span class="k">func</span> <span class="n">adder</span><span class="p">(</span><span class="n">args</span> <span class="o">...</span><span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
 <span class="n">total</span> <span class="o">:=</span> <span class="m">0</span>
 <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">v</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">args</span> <span class="p">{</span> <span class="c">// Iterate over all args</span>
 <span class="n">total</span> <span class="o">+=</span> <span class="n">v</span>
 <span class="p">}</span>
 <span class="k">return</span> <span class="n">total</span>
<span class="p">}</span>

</code></pre></div></div> <h2 id="errors">Errors</h2> <p>There is no exception handling. Functions that might produce an error just declare an additional return value of type Error. This is the Error interface:</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="kt">error</span> <span class="k">interface</span> <span class="p">{</span>
 <span class="n">Error</span><span class="p">()</span> <span class="kt">string</span>
<span class="p">}</span>
<span class="c">//A function that potentially returns an error:</span>
 
<span class="k">func</span> <span class="n">doStuff</span><span class="p">()</span> <span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
<span class="p">}</span>
<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
 <span class="n">result</span><span class="p">,</span> <span class="kt">error</span> <span class="o">:=</span> <span class="n">doStuff</span><span class="p">()</span>
 <span class="k">if</span> <span class="p">(</span><span class="kt">error</span> <span class="o">!=</span> <span class="no">nil</span><span class="p">)</span> <span class="p">{</span>
 <span class="c">// handle error</span>
 <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
 <span class="c">// do your stuff</span>
 <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="defer">Defer</h3> <p>Defers running a function until the surrounding function returns. The arguments are evaluated immediately, but the function call is not ran until later. <a href="https://go.dev/blog/defer-panic-and-recover">defer, panic, and recover</a></p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">defer</span> <span class="k">func</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Done"</span><span class="p">)</span>
  <span class="p">}()</span>
  <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Working..."</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div> <p>The following defer func uses current value of d, unless we use a pointer to get final value at end of main.</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">var</span> <span class="n">d</span> <span class="o">=</span> <span class="kt">int64</span><span class="p">(</span><span class="m">0</span><span class="p">)</span>
  <span class="k">defer</span> <span class="k">func</span><span class="p">(</span><span class="n">d</span> <span class="o">*</span><span class="kt">int64</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"&amp; %v Unix Sec</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="o">*</span><span class="n">d</span><span class="p">)</span>
  <span class="p">}(</span><span class="o">&amp;</span><span class="n">d</span><span class="p">)</span>
  <span class="n">fmt</span><span class="o">.</span><span class="n">Print</span><span class="p">(</span><span class="s">"Done "</span><span class="p">)</span>
  <span class="n">d</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">Now</span><span class="p">()</span><span class="o">.</span><span class="n">Unix</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="concurrency">Concurrency</h2> <p>Goroutines are lightweight threads (managed by Go, not OS threads).</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">go</span> <span class="k">func</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span> <span class="c">//starts a new go routine which runs given funciton i.e func</span>
</code></pre></div></div> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// a function (which can be later started as a goroutine)</span>
<span class="k">func</span> <span class="n">doStuff</span><span class="p">(</span><span class="n">s</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
<span class="p">}</span>
<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
 <span class="c">// using a named function in a goroutine</span>
 <span class="k">go</span> <span class="n">doStuff</span><span class="p">(</span><span class="s">"foobar"</span><span class="p">)</span>
 <span class="c">// using an anonymous inner function in a goroutine</span>
 <span class="k">go</span> <span class="k">func</span> <span class="p">(</span><span class="n">x</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
 <span class="c">// function body goes here</span>
 <span class="p">}(</span><span class="m">42</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="channels">Channels</h3> <p>Channels are concurrency-safe communication objects, used in goroutines.</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ch</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="k">chan</span> <span class="kt">int</span><span class="p">)</span> <span class="c">// create a channel of type int</span>

<span class="n">ch</span> <span class="o">&lt;-</span> <span class="m">42</span> <span class="c">// Send a value to the channel ch.</span>

<span class="n">v</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="n">ch</span> <span class="c">// Receive a value from ch</span>
<span class="o">/*</span><span class="n">Non</span><span class="o">-</span><span class="n">buffered</span> <span class="n">channels</span> <span class="n">block</span><span class="o">.</span> <span class="n">Read</span> <span class="n">blocks</span> <span class="n">when</span> <span class="n">no</span> <span class="n">value</span> <span class="n">is</span> <span class="n">available</span><span class="o">.</span>
<span class="n">write</span> <span class="n">blocks</span> <span class="k">if</span> <span class="n">a</span> <span class="n">value</span> <span class="n">already</span> <span class="n">has</span> <span class="n">been</span> <span class="n">written</span> <span class="n">but</span> <span class="n">not</span> <span class="n">read</span><span class="o">.</span> 
</code></pre></div></div> <h4 id="buffered-channels">Buffered Channels</h4> <p>Buffered channels limit the amount of messages it can keep.</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">/*Create a buffered channel. Writing to a buffered channels does not block if less than 
&lt;buffer size&gt; unread values have been written. */</span>
<span class="n">ch</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="k">chan</span> <span class="kt">int</span><span class="p">,</span> <span class="m">100</span><span class="p">)</span>

<span class="nb">close</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="c">/* closes the channel (only sender should close)
 Read from channel and test if it has been closed
 If ok is false, channel has been closed */</span>
<span class="n">v</span><span class="p">,</span> <span class="n">ok</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="n">ch</span>
</code></pre></div></div> <h4 id="waitgroup">WaitGroup</h4> <p>A WaitGroup waits for a collection of goroutines to finish. The main goroutine calls Add to set the number of goroutines to wait for. The goroutine calls <code class="language-plaintext highlighter-rouge">wg.Done()</code> when it finishes.</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">import</span> <span class="s">"sync"</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">var</span> <span class="n">wg</span> <span class="n">sync</span><span class="o">.</span><span class="n">WaitGroup</span>
  
  <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">item</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">itemList</span> <span class="p">{</span>
    <span class="c">// Increment WaitGroup Counter</span>
    <span class="n">wg</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="m">1</span><span class="p">)</span>
    <span class="k">go</span> <span class="n">doOperation</span><span class="p">(</span><span class="o">&amp;</span><span class="n">wg</span><span class="p">,</span> <span class="n">item</span><span class="p">)</span>
  <span class="p">}</span>
  <span class="c">// Wait for goroutines to finish</span>
  <span class="n">wg</span><span class="o">.</span><span class="n">Wait</span><span class="p">()</span>
  
<span class="p">}</span>

<span class="k">func</span> <span class="n">doOperation</span><span class="p">(</span><span class="n">wg</span> <span class="o">*</span><span class="n">sync</span><span class="o">.</span><span class="n">WaitGroup</span><span class="p">,</span> <span class="n">item</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">defer</span> <span class="n">wg</span><span class="o">.</span><span class="n">Done</span><span class="p">()</span>
  <span class="c">// do operation on item</span>
  <span class="c">// ...</span>
<span class="p">}</span>
</code></pre></div></div> <h4 id="iteration">Iteration</h4> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">/*Read from channel until it is closed*/</span>
<span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">ch</span> <span class="p">{</span>
 <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">/* select blocks on multiple channel operations. If one unblocks, the corresponding case is executed */</span>
<span class="k">func</span> <span class="n">doStuff</span><span class="p">(</span><span class="n">channelOut</span><span class="p">,</span> <span class="n">channelIn</span> <span class="k">chan</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
 <span class="k">select</span> <span class="p">{</span>
 <span class="k">case</span> <span class="n">channelOut</span> <span class="o">&lt;-</span> <span class="m">42</span><span class="o">:</span>
 <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"We could write to channelOut!"</span><span class="p">)</span>
 <span class="k">case</span> <span class="n">x</span> <span class="o">:=</span> <span class="o">&lt;-</span> <span class="n">channelIn</span><span class="o">:</span>
 <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"We could read from channelIn"</span><span class="p">)</span>
 <span class="k">case</span> <span class="o">&lt;-</span><span class="n">time</span><span class="o">.</span><span class="n">After</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">Second</span> <span class="o">*</span> <span class="m">1</span><span class="p">)</span><span class="o">:</span>
 <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"timeout"</span><span class="p">)</span>
 <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h4 id="channels-axioms">Channels axioms</h4> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// 1. A send to a nil channel blocks forever</span>
<span class="k">var</span> <span class="n">c</span> <span class="k">chan</span> <span class="kt">string</span>
<span class="n">c</span> <span class="o">&lt;-</span> <span class="s">"Hello, World!"</span>
<span class="c">// fatal error: all goroutines are asleep - deadlock!</span>

 <span class="c">// 2. A receive from a nil channel blocks forever</span>
<span class="k">var</span> <span class="n">c</span> <span class="k">chan</span> <span class="kt">string</span>
<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="o">&lt;-</span><span class="n">c</span><span class="p">)</span>
<span class="c">// fatal error: all goroutines are asleep - deadlock!</span>

 <span class="c">// 3. A send to a closed channel panics</span>
<span class="k">var</span> <span class="n">c</span> <span class="o">=</span> <span class="nb">make</span><span class="p">(</span><span class="k">chan</span> <span class="kt">string</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span>
<span class="n">c</span> <span class="o">&lt;-</span> <span class="s">"Hello world"</span>
<span class="nb">close</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>

<span class="n">c</span> <span class="o">&lt;-</span> <span class="s">"Hello, Panic!"</span>
<span class="c">// panic: send on closed channel</span>

<span class="c">// 5. A receive from a close channel returns the zero value immediately</span>
<span class="k">var</span> <span class="n">c</span> <span class="o">=</span> <span class="nb">make</span><span class="p">(</span><span class="k">chan</span> <span class="kt">int</span><span class="p">,</span> <span class="m">2</span><span class="p">)</span>
<span class="n">c</span> <span class="o">&lt;-</span> <span class="m">1</span>
<span class="n">c</span> <span class="o">&lt;-</span> <span class="m">2</span>
<span class="nb">close</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
<span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="m">3</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">{</span>
 <span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"%d "</span><span class="p">,</span> <span class="o">&lt;-</span><span class="n">c</span><span class="p">)</span>
<span class="p">}</span>
<span class="c">// 1 2 0</span>

</code></pre></div></div> <h2 id="resources">Resources</h2> <ul> <li><a href="https://awesome-go.com/">Awesome Go </a></li> <li><a href="https://go.dev/doc/effective_go">Effective in Go</a></li> <li><a href="https://gobyexample.com/"> Go by Example </a></li> <li><a href="https://go.dev/wiki/"> Go WiKi </a></li> </ul>]]></content><author><name></name></author><category term="software-engineering"/><category term="swe"/><summary type="html"><![CDATA[A cheat sheet for Golang]]></summary></entry></feed>